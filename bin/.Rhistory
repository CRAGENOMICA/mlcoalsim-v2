}
return(result)
}
percent_sd <- function(matrix.xy,percentage)
{
q.perc <- quantile(matrix.xy[,1],probs=seq(0,1,percentage/100),na.rm=TRUE)
sd.perc <- q.perc
x.min <- q.perc
for(i in 1:(length(q.perc)-1)) {
interval <- which(matrix.xy[,1] > q.perc[i] &  matrix.xy[,1] <= q.perc[i+1])
sd.perc[i] <- sd(matrix.xy[interval,2],na.rm=TRUE)
x.min[i] <- min(matrix.xy[interval,1],na.rm=TRUE)
}
result <- cbind(xmin=x.min,yvar=sd.perc)
result  <- result[-length(q.perc),]
if(sum(is.na(result) > 0)) {
result <- result[-which(is.na(result[,1]) + is.na(result[,2]) > 0),]
}
return(result)
}
erase.row.na.line <- function(result) {
if(sum(is.na(result) > 0)) {
result <- result[-which(is.na(result[,1]) + is.na(result[,2]) > 0),]
}
return(result)
}
erase.equal <- function(result2,result1) { result2[result2 != result1] }
ftr <- function(z,x1,x2,y1,y2) {(y2-y1)/(x2-x1) * (z-x1) + y1} #find the height in the hypotenuse given a value (z) in the basis
percentil.gamma <- function(mean,var,pvalue=0.95) {
#mean=alpha/beta; var=alpha/beta^2
#beta=mean/var; alpha=mena^2/var
#scale=alpha; rate=beta
beta1  <- mean/var
alpha1 <- (mean)^2/var
y1 <- qgamma(pvalue,shape=alpha1,rate=beta1)
return(y1)
}
find_sig_y <- function(chos.xy,mean.xy,sd.xy, pvalue=0.95,dist="normal") { #times.sd=2.32) {
if(!(dist == "normal" || dist == "gamma")) {return (NULL)}
result <- NULL
nonresult <- NULL
y1 <- NULL
y2 <- NULL
l <- 0
for(i in 1:length(sd.xy$y)) {
if(i==length(sd.xy$y)) {ii <- i
} else {ii <- i + 1}
if(dist=="normal") {
times.sd <- qnorm(pvalue)
y1[i] <- times.sd*sd.xy$y[i] +mean.xy$y[i]
y2[i] <- times.sd*sd.xy$y[ii]+mean.xy$y[ii]
}
if(dist=="gamma") {
y1[i] <- percentil.gamma(mean.xy$y[i ],(sd.xy$y[i ])^2,pvalue)
y2[i] <- percentil.gamma(mean.xy$y[ii],(sd.xy$y[ii])^2,pvalue)
}
miny <- min(y1[i],y2[i])
maxy <- max(y1[i],y2[i])
if(i==1) {minx <- min(chos.xy$x)
}else {minx <- mean.xy$x[i]}
if(i==length(sd.xy$x)) {maxx <- max(chos.xy$x)
} else {maxx  <- mean.xy$x[i+1]}
yw1 <- chos.xy$y >= miny
xw1 <- chos.xy$x >= minx
xw2 <- chos.xy$x <= maxx
result1 <- which(apply(cbind(xw1,xw2,yw1),1,sum) == 3) #possibly significant in the range
result2 <- which(apply(cbind(xw1,xw2),1,sum) == 2) #all windows of the range
#eliminate those values under the triangle inferred
if(length(result1) > 0) {
for(j in length(result1):1) {
if(chos.xy$y[result1[j]] < ftr(chos.xy$x[result1[j]], minx, maxx, y1, y2)) {
result1 <- result1[-j]
}
result <- c(result,result1) #keep significant
for(k in result1) {
result2 <- erase.equal(result2,k) #keep non-significant
}
for(k in result1) {
l <- l + 1
nonresult[l] <- list(result2)
}
list(result=result,nonsig=nonresult,y1=y1,y2=y2)
}
do.smooth <- function(matrix2) {
matrix.smooth <- matrix2
for(i in 2:(length(matrix2[,1])-1)) {
matrix.smooth[i,1] <- mean(c(matrix2[i-1,1],matrix2[i,1],matrix2[i+1,1]))
matrix.smooth[i,2] <- mean(c(matrix2[i-1,2],matrix2[i,2],matrix2[i+1,2]))
}
return(matrix.smooth)
}
#GET ARGS (MIREIA)
#if(length(args) == 1) {
#  thefilename <- args[1] #INPUT FILE
#}else {
#  thefilename <- "mean_length_comp_main_gen.txt"
#  print("no args found")
#}
#x <- read.table(file=thefilename,header=TRUE) #file that includes recombination at column 4 and length at column 1
#rec <- x[,4]
#llarg <- x[,1]
thefilename <- "frags_recSwine6.txt"
x <- read.table(file=thefilename,header=FALSE) #file that includes recombination at column 4 and length at column 1
x[,4] <- c(x[,2] - x[,1])
rec <- x[,3]
llarg <- x[,4]
percentage <- 20 #(at least >10 values per bin)
pvalue <- 0.999
#times.sd <- qnorm(pvalue) #2.32 is the error standard at 99% of the normal distriplbution
#define variables to work
var1 <- rec; #afegir la llista de recombinacio
name.var1 <- "Recombination rate (1Mb bins)" #aixo nomes es el nom de la variable
var2 <- llarg; #afegeix la llista de llargades
#name.var2 <- "Mean length (1Mb bins)" #el nom...
name.var2 <- c("Length") #colnames(x[1]) #el nom de la columna (MIREIA)
matrix.xy <- cbind(x=var1,y=var2) #combina en una matriu les dues variables
matrix.xy <- erase.row.na.line(matrix.xy) #esborra les linies amb NA
#calculate means and sd across the var1
mean.xy <- percent_average(matrix.xy,percentage= percentage)
sd.xy <- percent_sd(matrix.xy,percentage= percentage)
#lines(c(mean.xy[,1],max(var1)),c(times.sd*sd.xy[,2]+mean.xy[,2],times.sd*sd.xy[length(sd.xy[,2]),2]+mean.xy[length(sd.xy[,2]),2]),type="l",col="red",lty=1)
#lines(c(mean.xy[,1],max(var1)),c(mean.xy[,2],mean.xy[length(mean.xy[,2]),2]),type="l",col="red",pch=16,lty=3)
#do smooth curves
mean.xy.smooth <- do.smooth(mean.xy)
sd.xy.smooth <- do.smooth(sd.xy)
#lines(c(mean.xy.smooth[,1],max(var1)),c(times.sd*sd.xy.smooth[,2]+mean.xy.smooth[,2],times.sd*sd.xy.smooth[length(sd.xy.smooth[,2]),2]+mean.xy.smooth[length(sd.xy.smooth[,2]),2]),type="l",col="red",lty=1)
#lines(c(mean.xy.smooth[,1],max(var1)),c(mean.xy.smooth[,2],mean.xy.smooth[length(mean.xy.smooth[,2]),2]),type="l",col="red",pch=16,lty=3)
#lines(c(0,mean.xy.smooth$x,max(var1)),c(percentil.gamma(mean.xy.smooth$y[0],(sd.xy.smooth[0]$y)^2,pvalue),percentil.gamma(mean.xy.smooth$y,(sd.xy.smooth$y)^2,pvalue),percentil.gamma(mean.xy.smooth$y[length(sd.xy.smooth$y)],(sd.xy.smooth$y[length(sd.xy.smooth$y)])^2,pvalue)),type="l",col="red",lty=1)
#lines(c(0,mean.xy.smooth$x,max(var1)),c(mean.xy.smooth$y[0],mean.xy.smooth$y,mean.xy.smooth$y[length(mean.xy.smooth$y)]),type="l",col="red",pch=16,lty=3)
mean.xy.spline <- spline(mean.xy.smooth)
sd.xy.spline <- spline(sd.xy.smooth)
rm(ls())
rm(ls)
ls()
rm(a)
View(aa)
library(ape)
library(abc)
exp(62.5)
log(62.5)
library(locfit)
dp <- read.table(file="/Users/sramos/Desktop/proyectos2105.txt".header=T)
dp <- read.table(file="/Users/sramos/Desktop/proyectos2105.txt",header=T)
dp <- read.table(file="/Users/sramos/Desktop/proyectos2105.txt",header=T,sep = "\t")
175+35+8+7.5+16.5
pv <- runif(100000)
chi2.2k <- NULL
for(i in 1:10000) {
chi2.2k <- c(chi2.2k,-2*sum(log(pv[((i-1)*10+1):((i-0)*10)])))
}
par(mfrow=c(1,2))
plot(density(rchisq(n=10000,df = 2*10)))
plot(density(chi2.2k))
mean(chi2.2k)
var(chi2.2k)
m <- read.table(file="~/Documents/WorkatCRAG/0.Open_projects/CromY_Analysis/ChromY_FIFTH/RatioXA-LinkageDisequilibrium-SexRatio/subdivision/input_M01Y_mlcoalsim_prior00002.out",skip=9,header=F)
head(m)
m <- m/2
head(m)
colnames(m) <- "prior"
write.table(file="~/Documents/WorkatCRAG/0.Open_projects/CromY_Analysis/ChromY_FIFTH/RatioXA-LinkageDisequilibrium-SexRatio/subdivision/input_M01A_mlcoalsim_prior_MhalfY.out")
write.table(m,file="~/Documents/WorkatCRAG/0.Open_projects/CromY_Analysis/ChromY_FIFTH/RatioXA-LinkageDisequilibrium-SexRatio/subdivision/input_M01A_mlcoalsim_prior_MhalfY.out",quote=FALSE,row.names=FALSE)
colnames(m) <- "#prior"#
write.table(m,file="~/Documents/WorkatCRAG/0.Open_projects/CromY_Analysis/ChromY_FIFTH/RatioXA-LinkageDisequilibrium-SexRatio/subdivision/input_M01A_mlcoalsim_prior_MhalfY.txt",quote=FALSE,row.names=FALSE)
NI.MC1R <- c(0.84,0.02,0.09,0.03,0.00)
SE.MC1R <- c(0.76,0.19,0.04,0.00,0.01)
NI.MC1R <- c(0.84,0.02,0.09,0.03,0.00,0.00)
SE.MC1R <- c(0.76,0.19,0.04,0.00,0.01,0.00)
NI.MC1R <- c(0.84,0.02,0.09,0.03,0.00,0.00,0.02)
NI.MC1R
SE.MC1R
SA.MC1R <- c(1,0,0,0,0,0)
SA.MC1R
sum(NI.MC1R)
sum(SA.MC1R)
sum(SE.MC1R)
SA.MC1R <- SA.MC1R * 26
SE.MC1R <- SE.MC1R * 90
NI.MC1R <- NI.MC1R * 113
SA.MC1R
SE.MC1R
NI.MC1R
tc <- rbind(SA.MC1R,SE.MC1R,NI.MC1R)
NI.MC1R <- NI.MC1R[-5]
tc <- rbind(SA.MC1R,SE.MC1R,NI.MC1R)
tc
ftable(Titanic, row.vars = 1:3)
ftable(Titanic, row.vars = 1:2, col.vars = "Survived")
ftable(Titanic, row.vars = 2:1, col.vars = "Survived")
x <- ftable(mtcars[c("cyl", "vs", "am", "gear")])
x
ftable(x, row.vars = c(2, 4))
ftable(mtcars$cyl, mtcars$vs, mtcars$am, mtcars$gear, row.vars = c(2, 4),
dnn = c("Cylinders", "V/S", "Transmission", "Gears"))
library(MASS)
tbl = table(survey$Smoke, survey$Exer)
tbl
tc <- table(tc)
tc
tc <- table(SA.MC1R,SE.MC1R,NI.MC1R)
tc
tc <- rbind(SA.MC1R,SE.MC1R,NI.MC1R)
tc
survey$Smoke
class(tbl)
tbl
chisq.test(tbl)
chisq.test(tc)
chisq.test(tc[c(1,2),])
tc
chisq.test(tc[c(3,2),])
tct <- as.table(tc)
tct
chisq.test(tc[c(1,2),])
chisq.test(tc[c(3,2),])
chisq.test(tct)
tc <- rbind(SA.MC1R,SE.MC1R,NI.MC1R)
tct <- as.table(tc)
chisq.test(tct)
SA.MC1R <- c(52,0,0,0,0,0)
NI.MC1R <- c(94.92*2,2.26,10.17+2.26,3.39+2.26)
SE.MC1R <- c(68.4*2,17.10+0.9*2,3.60,0)
tc <- rbind(NI.MC1R,SE.MC1R,SA.MC1R)
SA.MC1R <- c(52,0,0,0,0)
tc <- rbind(NI.MC1R,SE.MC1R,SA.MC1R)
SA.MC1R
SE.MC1R
NI.MC1R
SA.MC1R <- c(52,0,0,0)
tc <- rbind(NI.MC1R,SE.MC1R,SA.MC1R)
tct <- as.table(tc)
tct
tct[1,]+tct[2,]
tct12 <- tct[1,]+tct[2,]
tct13 <- tct[1,]+tct[3,]
tct23 <- tct[2,]+tct[3,]
a <- read.table(file="/Volumes/SSD01/FASTA-Cucumber/Results/Comparative_RichvsPoor_melonvsCucumber/CM3.5_allchr_coverage_per_bin1Mb_rich-region.txt")
b <- read.table(file="/Volumes/SSD01/FASTA-Cucumber/Results/Comparative_RichvsPoor_melonvsCucumber/CsGy14_allchr_coverage_per_bin1Mb_rich-region.txt")
h <- c("chr","start","end","bp_genes","percent_genes","bp_TE","percent_TE","region")
colnames(a) <- h
colnames(b) <- h
head(a)
class(a)
head(b)
class(b)
head(a); tail(a); class(a)
head(b); tail(b); class(b)
cucumber <- a
melon <- b
head(cucumber); tail(cucumber); class(cucumber)#
head(melon); tail(melon); class(melon)
melon <- a#
cucumber <- b#
head(cucumber); tail(cucumber); class(cucumber)#
head(melon); tail(melon); class(melon)
16/(2^16)
16/(16*16)
1/16
log(1/16)
rm(list=ls())
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin/DnaSP.no5output.txt")
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin")
new <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000)
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/old_versions/mlcoalsimX\ 2/bin/")
old <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000)
apply(new,2,mean,na.rm=T)
apply(old,2,mean,na.rm=T)
head(new)
head(old)
pq <- c(0.0005,0.005,0.025,0.05,0.1,0.25,0.50,0.75,0.90,0.95,0.975,0.995,0.9995)
apply(new,2,quantile,probs=pq,na.rm=T)
dim(new)
dim(old)
mean(new[,1],na.rm=T)
apply(new,2,mean,na.rm=T)
apply(new,1,mean,na.rm=T)
apply(new,2,mean,na.rm=T)
mean(new[,1],na.rm=T)
apply(X = new,MARGIN = 2,FUN = mean,na.rm=T)
mean(old[,1],na.rm=T)
mean(new[,10],na.rm=T)
mean(old[,20],na.rm=T)
mean(new[,20],na.rm=T)
head(new)
head(old)
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin")
new <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000,na.strings = "na")
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/old_versions/mlcoalsimX\ 2/bin/")
old <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000,na.strings = "na")
head(new)
dim(new)
head(old)
dim(old)
pq <- c(0.0005,0.005,0.025,0.05,0.1,0.25,0.50,0.75,0.90,0.95,0.975,0.995,0.9995)
apply(new,2,quantile,probs=pq,na.rm=T)
apply(old,2,quantile,probs=pq,na.rm=T)
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin")
new <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000,na.strings = "na")
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/old_versions/mlcoalsimX\ 2/bin/")
old <- read.table(file="DnaSP.no5output.txt",header=T,skip=38,nrows = 1000,na.strings = "na")
head(new)
dim(new)
head(old)
dim(old)
pq <- c(0.0005,0.005,0.025,0.05,0.1,0.25,0.50,0.75,0.90,0.95,0.975,0.995,0.9995)
apply(new,2,quantile,probs=pq,na.rm=T)
apply(old,2,quantile,probs=pq,na.rm=T)
q.new <- apply(new,2,quantile,probs=pq,na.rm=T)
q.old <- apply(old,2,quantile,probs=pq,na.rm=T)
diff.q.tot <- q.new - q.tot
diff.q.tot <- q.new - q.old
diff.q.tot
q.new[,c(5:12)]
cbind(q.new[,c(5:12)],q.old[,c(5:12)])
rbind(q.new[,c(5:12)],q.old[,c(5:12)])
cbind(q.new[,c(5:12)],q.old[,c(5:12)])
cbind(q.new[,c(23:24)],q.old[,c(23:24)])
cbind(q.new[,c(35:36)],q.old[,c(35:36)])
cbind(q.new[,c(43:44)],q.old[,c(43:44)])
cbind(q.new[,c(55:56)],q.old[,c(55:56)])
cbind(q.new[,c(79:80)],q.old[,c(79:80)])
cbind(q.new[,c(87:88)],q.old[,c(87:88)])
q.new
seq(1,length(q.new[1,],2))
seq(1,length(q.new[1,]),2)
q.new[,seq(1,length(q.new[1,]),2)]
q.new[,seq(2,length(q.new[1,]),2)]
q.new.avg <- q.new[,seq(1,length(q.new[1,]),2)]
q.new.var <- q.new[,seq(2,length(q.new[1,]),2)]
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin")
write.table(x=q.new.avg,file="quantiles_avg_debug_mlcoalsim.txt",quote = FALSE)
write.table(x=q.new.avg,file="quantiles_var_debug_mlcoalsim.txt",quote = FALSE)
write.table(x=q.new.avg,file="quantiles_avg_debug_mlcoalsim.txt",quote = FALSE,sep = "\t")
write.table(x=q.new.avg,file="quantiles_var_debug_mlcoalsim.txt",quote = FALSE,sep = "\t")
achazY.loc <- read.table(file="DnaSP.2output_AchY.out",header=T,skip=38,nrows = 1000,na.strings = "na")
TD.loc <- read.table(file="DnaSP.2output_TD.out",header=T,skip=38,nrows = 1000,na.strings = "na")
head(TD.loc)
head(achazY.loc)
TD.avg <- apply(TD.loc,1,mean,na.rm=T)
TD.var <- apply(TD.loc,1,var,na.rm=T)
AY.avg <- apply(achazY.loc,1,mean,na.rm=T)
AY.var <- apply(achazY.loc,1,var,na.rm=T)
head(TD.avg)
head(TD.var)
quantile(TD.avg,probs = pq)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(AY.avg,probs = pq,na.rm=T)
TD.avg <- apply(TD.loc,1,mean,na.rm=T)
TD.var <- apply(TD.loc,1,var,na.rm=T)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(TD.var,probs = pq,na.rm=T)
head(TD.avg)
AY.avg <- apply(achazY.loc,1,mean,na.rm=T)
AY.var <- apply(achazY.loc,1,var,na.rm=T)
quantile(AY.avg,probs = pq,na.rm=T)
quantile(AY.var,probs = pq,na.rm=T)
head(TD.var)
TD.loc <- read.table(file="DnaSP.2output_TD.out",header=T,skip=38,nrows = 1000,na.strings = "na")
achazY.loc <- read.table(file="DnaSP.2output_AchY.out",header=T,skip=38,nrows = 1000,na.strings = "na")
head(TD.loc)
head(achazY.loc)
TD.avg <- apply(TD.loc,1,mean,na.rm=T)
TD.var <- apply(TD.loc,1,var,na.rm=T)
head(TD.avg)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(TD.var,probs = pq,na.rm=T)
AY.avg <- apply(achazY.loc,1,mean,na.rm=T)
AY.var <- apply(achazY.loc,1,var,na.rm=T)
head(TD.var)
quantile(AY.avg,probs = pq,na.rm=T)
quantile(AY.var,probs = pq,na.rm=T)
setwd("/Users/sramos/Documents/WorkatMPI/mlcoal/mlcoalsimmpiX/build/mlcoalsimX_pack/bin")
write.table(x=q.new.avg,file="quantiles_avg_debug_mlcoalsim.txt",quote = FALSE,sep = "\t")
write.table(x=q.new.avg,file="quantiles_var_debug_mlcoalsim.txt",quote = FALSE,sep = "\t")
TD.loc <- read.table(file="DnaSP.2output_TD.out",header=T,skip=38,nrows = 1000,na.strings = "na")
achazY.loc <- read.table(file="DnaSP.2output_AchY.out",header=T,skip=38,nrows = 1000,na.strings = "na")
head(TD.loc)
head(achazY.loc)
TD.avg <- apply(TD.loc,1,mean,na.rm=T)
TD.var <- apply(TD.loc,1,var,na.rm=T)
head(TD.avg)
head(TD.var)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(TD.var,probs = pq,na.rm=T)
AY.avg <- apply(achazY.loc,1,mean,na.rm=T)
AY.var <- apply(achazY.loc,1,var,na.rm=T)
head(AY.avg)
head(AY.var)
quantile(AY.avg,probs = pq,na.rm=T)
quantile(AY.var,probs = pq,na.rm=T)
TD.loc <- read.table(file="DnaSP.2output_TD.out",header=T,nrows = 1000,na.strings = "na")
achazY.loc <- read.table(file="DnaSP.2output_AchY.out",header=T,nrows = 1000,na.strings = "na")
head(TD.loc)
head(achazY.loc)
TD.avg <- apply(TD.loc,1,mean,na.rm=T)
TD.var <- apply(TD.loc,1,var,na.rm=T)
head(TD.avg)
head(TD.var)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(TD.var,probs = pq,na.rm=T)
AY.avg <- apply(achazY.loc,1,mean,na.rm=T)
AY.var <- apply(achazY.loc,1,var,na.rm=T)
head(AY.avg)
head(AY.var)
quantile(AY.avg,probs = pq,na.rm=T)
quantile(AY.var,probs = pq,na.rm=T)
apply(TD.loc,2,quantile,probs = pq,na.rm=T)
apply(achazY.loc,2,quantile,probs = pq,na.rm=T)
quantile(AY.avg,probs = pq,na.rm=T)
quantile(TD.avg,probs = pq,na.rm=T)
quantile(TD.var,probs = pq,na.rm=T)
write.table(x=q.new.var,file="quantiles_var_debug_mlcoalsim.txt",quote = FALSE,sep = "\t")
